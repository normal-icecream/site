{
  "version": 3,
  "sources": ["../../../cloudflare/worker.js", "../../../../../../../.nvm/versions/node/v21.6.1/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../bundle-EeOAAq/middleware-insertion-facade.js", "../../../../../../../.nvm/versions/node/v21.6.1/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-EeOAAq/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/andicarlstrom/Programming/professional/new/site/.wrangler/tmp/dev-imscZz",
  "sourcesContent": ["// List of URLs that are allowed to make requests to Square based on environment\n// TODO - add .club as an allowed origin\nconst ALLOWED_ORIGINS = [\n  'localhost:3000', // Local development\n  '--site--normal-icecream.aem.page', // Preview domain/\n  '--site--normal-icecream.aem.live', // Production domain/\n];\n\nconst SANDBOX_ROUTES = [\n  'localhost:3000', // Local development\n  '--site--normal-icecream.aem.page', // Preview domain/\n];\n\nexport default {\n  async fetch(request, env) {\n    // Get the 'Origin' header from the incoming request to validate the source\n    const originHeader = request.headers.get('Origin');\n\n    // Check if originHeader is null or undefined\n    if (!originHeader) {\n      return new Response('Bad Request: Origin header is missing', {\n        status: 400,\n        headers: { 'Content-Type': 'text/plain' },\n      });\n    }\n\n    // Check if the request's origin is in the list of allowed origins\n    const isAllowed = ALLOWED_ORIGINS.find((element) => originHeader.endsWith(element));\n    if (!isAllowed) {\n      // Reject the request with a 403 status if the origin is not allowed\n      return new Response(`Forbidden: Requests from origin header ${originHeader} are not allowed.`, {\n        status: 403,\n        headers: { 'Content-Type': 'text/plain' },\n      });\n    }\n    \n    if (request.method === 'OPTIONS') {\n      // Handle CORS preflight requests by responding with appropriate headers\n      return new Response(null, {\n        headers: {\n          'Access-Control-Allow-Origin': originHeader,\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n        },\n      });\n    }\n\n    const url = new URL(request.url);\n    \n    // Determine environment\n    const forceSandbox = url.searchParams.get('env') === 'sandbox';\n    const forceProd = url.searchParams.get('env') === 'prod';\n    const isSandboxEnvironment = SANDBOX_ROUTES.some((element) => originHeader.endsWith(element));\n\n    // Route to sandbox or prod env based on origin url UNLESS request speficies which env to hit explicitly\n    const useProduction = forceProd || (!forceSandbox && !isSandboxEnvironment);\n    // Select correct API key in cloudflare dashboard based on useProduction flag\n    const apiKey = useProduction ? env.SQUARE_PROD_API_KEY : env.SQUARE_SANDBOX_API_KEY;\n    // Select correct square path to hit based on useProduction flag\n    const baseUrl = useProduction ? 'https://connect.squareup.com' : 'https://connect.squareupsandbox.com';\n\n    // Extract the pathname from the request URL and modify it to match the Square API\n    const squareUrl = `${baseUrl}${url.pathname.replace('/api/square', '')}`;\n\n    const filteredParams = Array.from(url.searchParams.entries()).filter((([key]) => !key.startsWith('env')));\n    // Rebuild the query parameters without the ones starting with \"env\"\n    url.search = new URLSearchParams(filteredParams).toString();\n\n    const queryString = filteredParams.map(([key, value], i) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');\n\n    const fullSquareUrl = queryString ? `${squareUrl}?${queryString}` : squareUrl;\n    \n    let requestBody = {};\n    if (request.body) {\n      const bodyText = await request.text();\n    \n      try {\n        requestBody = JSON.parse(bodyText); // Parse bodyText into an object\n      } catch (error) {\n        return new Response(\"Invalid JSON in request body\", { status: 400 });\n      }\n    }\n\n    // Idempotency Key\n    const idempotencyKeyHeader = request.headers.get(\"Idempotency-Key\");\n    // Add the idempotency key header for POST or PUT requests\n    if (request.method === 'POST' || request.method === 'PUT') {\n      const idempotencyKey = idempotencyKeyHeader || crypto.randomUUID();\n      const body = JSON.parse(requestBody)\n      body.idempotency_key = idempotencyKey;\n      requestBody = body;\n      \n      // Cache the key for idempotency logic\n      const cacheKey = `${idempotencyKey}-${url.pathname}`;\n      const storedResponse = await env.IDEMPOTENCY_STORE.get(cacheKey, { type: \"json\" });\n      if (storedResponse) {\n        return new Response(JSON.stringify(storedResponse.body), {\n          status: storedResponse.status,\n          headers: {\n            ...storedResponse.headers,\n            'Access-Control-Allow-Origin': originHeader,\n          },\n        });\n      }\n    }\n\n    // Create a new request object to forward the modified request to the Square API\n    const modifiedRequest = new Request(fullSquareUrl, {\n      method: request.method,\n      headers: {\n        // Attach the appropriate API key for authentication\n        Authorization: `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: request.method !== 'GET' && request.method !== 'HEAD' ? JSON.stringify(requestBody) : null,\n    });\n\n    // Send the modified request to the Square API\n    const response = await fetch(modifiedRequest);\n\n    // Store response in KV for idempotency\n    if (request.method === 'POST' || request.method === 'PUT') {\n      const cacheKey = `${idempotencyKeyHeader || crypto.randomUUID()}-${url.pathname}`;\n      const clonedResponse = response.clone();\n      const responseBody = await clonedResponse.json();\n      const responseHeaders = Object.fromEntries(clonedResponse.headers.entries());\n\n      await env.IDEMPOTENCY_STORE.put(\n        cacheKey,\n        JSON.stringify({\n          status: clonedResponse.status,\n          body: responseBody,\n          headers: responseHeaders,\n        }),\n        { expirationTtl: 3600 } // 1 hour expiration\n      );\n    }\n\n    // Add CORS headers to the response to enable cross-origin requests\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': originHeader,\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    };\n\n    // Create a new response object to include the CORS headers\n    const modifiedResponse = new Response(response.body, response);\n    Object.entries(corsHeaders).forEach(([key, value]) => {\n      modifiedResponse.headers.set(key, value);\n    });\n\n    // Return the final response to the client\n    return modifiedResponse;\n  },\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/andicarlstrom/Programming/professional/new/site/cloudflare/worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/andicarlstrom/.nvm/versions/node/v21.6.1/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\n\n\t\t\t\texport * from \"/Users/andicarlstrom/Programming/professional/new/site/cloudflare/worker.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/andicarlstrom/Programming/professional/new/site/.wrangler/tmp/bundle-EeOAAq/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/andicarlstrom/.nvm/versions/node/v21.6.1/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/andicarlstrom/Programming/professional/new/site/.wrangler/tmp/bundle-EeOAAq/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/andicarlstrom/Programming/professional/new/site/.wrangler/tmp/bundle-EeOAAq/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
